@* @using Microsoft.AspNetCore.HttpContext *@
@* @inject IAccountService AccountService *@
@* @inject IAlertService AlertService *@
@* @inject IItemService ItemService *@
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager NavigationManager
@inject IShoppingListService ShoppingListService
@* @inject IHttpContextAccessor httpContextAccessor *@


@if(!Edit)
{
    <div>
        <button class="btn btn-primary button" @onclick="(()=>Edit=true)">Edit Shopping List</button>
    </div>
    <section class="card">
        <div class="card-header">
            <h4>Shopping List</h4> 
        </div>
        
        <table id="shopping-list-table" class="table semester-table">
            <col><col><col>
            <thead>
                <tr class="table-header">
                    <th>Item Name</th>
                    <th>Quantity</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var i in currList)
                {
                <tr>
                    <td>
                        <p>@i.ItemName</p>
                    </td>
                    <td>
                        <p>@i.Quantity @i.QuantityType</p>
                    </td>
                    <td>
                        @if(i.DonorId == null)
                        {
                            <label>Pending</label>
                        }
                        else
                        {
                            <label>Accepted</label>
                        }
                    </td>
                </tr>
                }
            </tbody>
        </table>

        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="add-section">
            <div class="input">
                <InputText placeholder="Canned Beans" @bind-Value="model.ItemName" />
                <ValidationMessage For="@(() => model.ItemName)" />
            </div>
            <div class="input">
                <InputNumber @bind-Value="model.Quantity"/>
                <ValidationMessage For="@(() => model.Quantity)" />
            </div>
            <div class="input">
                <InputSelect TValue="string" class="box-dropdown form-control qt" @bind-Value="model.QuantityType">
                    <option>-</option>
                    <option>lbs</option>
                    <option>units</option>
                </InputSelect>
                <ValidationMessage For="@(() => model.QuantityType)" />
            </div>
            <div>
                <button class="add" disabled="@loading">
                        @if (loading) 
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    +
                </button>
            </div>
        </div>
        </EditForm>
    </section>          
}
else{
    <CascadingValue Name="Edit" Value="@Edit">
        <EditGroceryList Id="@Id"></EditGroceryList>
    </CascadingValue>
}
        
@* } *@


@code{
    [Parameter]
    public string Id {get; set;}
    
    [Parameter]
    public bool Edit { get; set; }

    private bool IsDisabled = false;
    
 
    
    @* Model that is used for the EditForm*@
    private DonationRequest model = new DonationRequest();

    public List<DonationRequest> currList = new List<DonationRequest>();
    @* DonationRequest donation = new DonationRequest(); *@
@* 
    AddItem item = new AddItem(); *@
    private bool loading = false;

    @* 
    Get a list of all donation requests where the id is not present in the donation progress table/where donor id = null
        - cannot edit/delete a donation that has been accepted/donated
            - could display them but not make them editable or deletable/add a note at the top:
                Showing all items that are Pending
        If the checkbox is selected the ids are added to an idsToDelete list 
        when delete is selected they are deleted
        For Update/Edit:
            there will be an edit button on the right of the row, if the button is selected, the row becomes editable?
    *@
    protected override async Task OnInitializedAsync()
    {
        Edit = false;
        Console.WriteLine("OnInitialized: " + Edit);
        
        //is this necessary?
        @* try{ *@
            currList = await ShoppingListService.GetItemsByFeeder(Id);
        @* }
        catch(Exception e)
        {
            Console.WriteLine(e.Message);
        } *@
    }

    private void EditList()
    {
        Edit = true;
        
    }

    //Does this do anything?
    @* private void Update(int id)
    { *@
        @* var word = document.getElementById("id");
        word.contentEditable = true;
        word.focus(); *@
    @* } *@
    
    public void OnValidSubmit()
    {
        //Console.WriteLine("Submitted");
        model.FeederId = Id;
        
        currList.Add(model);
        Console.WriteLine(currList.Count);
        
        DonationRequest m = model;
   
        var s = ShoppingListService.Register(m);
        //Console.WriteLine(s);

        model = new DonationRequest();
        model.ItemName = string.Empty;
        model.Quantity = 0;
    }

    private void HandleEditUpdate()
    {
        // Handle updates to the Edit property

        // Trigger a re-render
        StateHasChanged();
    }

    //Testing:
    //Used for testing the Parameter
    protected override void OnParametersSet()
    {
        // This method is called whenever parameters are set (including cascading parameters)
        // You can react to parameter changes here
        Console.WriteLine($"Id changed to: {Id}");
        StateHasChanged();
    }
}