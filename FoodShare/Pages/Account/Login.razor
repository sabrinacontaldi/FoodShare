@page "/account/login"

@using Microsoft.AspNetCore.Components.Authorization
@* @inject IAccountService AccountService *@
@* @inject IAlertService AlertService *@
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ISBUserService UserService
@inject IJSRuntime JSRuntime


@* @inject JwtTokenHandler TokenHandler *@

<h1>Welcome back!</h1>

<body class="main-page">
    <div class="card">
        <h4 class="card-header">Login</h4>
        <div class="card-body">
            <EditForm Model="@SBModel" OnValidSubmit="OnValidSubmit2">
                <DataAnnotationsValidator/>
                <div class="form-group">
                    <label>Email</label>
                    <InputText @bind-Value="SBModel.Email" class="form-control" />
                    <ValidationMessage For="@(() => SBModel.Email)" />
                </div>
                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="SBModel.Password" class="form-control" type="password"/>
                    <ValidationMessage For="@(() => SBModel.Password)" />
                </div>
                @if(error)
                {
                   <p class="error">@errorMessage</p>
                }

                <div class="buttons">
                    <button disabled="@loading" class="btn btn-primary button">
                    @if (loading) 
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Login
                    </button>
                    <NavLink href="account/create-account" class="btn btn-link">Create Account</NavLink>
                </div>
            </EditForm>
        </div>
    </div>
</body>
@code {
    @* private Models.Account.Login model = new Models.Account.Login(); *@

    private Models.Account.SBLogin SBModel = new Models.Account.SBLogin();

    @* private Models.User user = new Models.User(); *@
    @* private Models.Account.AddPassword password = new Models.Account.AddPassword(); *@

    private bool loading;

     @* private bool IsAuthorized => TokenHandler.IsTokenValid(); *@

    private bool error = false;
    private string errorMessage = "Username or password is incorrect";
    
    private async void OnValidSubmit2()
    {
        loading = true;
        try
        {
            string token = await UserService.Login(SBModel);
            @* Token is working! *@
            @* Get token from header *@
            @* Decode token and verify that it is valid *@
            @* if decoded value doesnt exist -> expired *@
            @* find user role*@
            @*  *@
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "jwt", token);
            Console.WriteLine(token);
            
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        catch(Exception ex)
        {
            loading = false;
            
            error = true;
            StateHasChanged();
        }

    }
}