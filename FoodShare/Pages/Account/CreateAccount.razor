@page "/account/create-account"
@inject ISBUserService SBUserService
@inject IProfileService ProfileService
@inject NavigationManager NavigationManager

<h1>Welcome to the FoodShare Team!</h1>

<body>

    @* The user chooses the type of account they want to create *@
     <div class = "box">
        <div class="@donorclass">
            <h5>Donor</h5>
            <div class="pra">
                <p>I represent a grocery store or another food provider and would like to help donate food to organizations
                    that feed those without food. </p>
                <button class="button" @onclick="newDonor">This is me!</button>
            </div>

        </div>
        <div class="@feederclass">
            <h5>Feeder</h5>
            <div class="pra">
                <p>I represent an organization that provides food to those who don't have food. I would like to get donations
                    to help me acheive this.</p>
                <button class="button" @onclick="newFeeder">This is me!</button>
            </div>
        </div>
    </div>

@* The create account form is only visible once the user has selected the type of account they want to create *@
@if(feeder || donor)
{
    <div class="card">
        <h4 class="card-header">New Account</h4>
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="InvalidSubmit">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label>Organization Name</label>
                    <InputText @bind-Value="model.Organization" class="form-control" />
                    <ValidationMessage For="@(() => model.Organization)" />
                </div>

                <div class="form-group">
                    <label>Contact Number</label>
                    <InputNumber @bind-Value="model.Number" class="form-control" />
                    <ValidationMessage For="@(() => model.Organization)" />
                </div>

                <div class="form-group">
                    <label>Street Address</label>
                    <InputText @bind-Value="model.StreetAddress" class="form-control" />
                    <ValidationMessage For="@(() => model.StreetAddress)" />
                </div>

                <div class="form-group">
                    <label>City</label>
                    <InputText @bind-Value="model.City" class="form-control" />
                    <ValidationMessage For="@(() => model.City)" />
                </div>

                <div class="form-group">
                    <label>State</label>
                    <InputText @bind-Value="model.State" class="form-control" />
                    <ValidationMessage For="@(() => model.State)" />
                </div>

                <div class="form-group">
                    <label>Zip Code</label>
                    <InputNumber @bind-Value="model.ZipCode" class="form-control" />
                    <ValidationMessage For="@(() => model.ZipCode)" />
                </div>

                <div class="form-group">
                    <label>Email Address</label>
                    <InputText @bind-Value="model.EmailAddress" type="email" class="form-control" />
                    <ValidationMessage For="@(() => model.EmailAddress)" />
                </div>

                <div class="form-group">
                    <label>Confirm Email Address</label>
                    <InputText @bind-Value="model.ConfirmEmail" type="email" class="form-control" />
                    <ValidationMessage For="@(() => model.ConfirmEmail)" />
                </div>

                <div class="form-group">
                    <label>Password</label>
                    <InputText @bind-Value="model.Password" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.Password)" />
                </div>

                <div class="form-group">
                    <label>Confirm Password</label>
                    <InputText @bind-Value="model.ConfirmPassword" type="password" class="form-control" />
                    <ValidationMessage For="@(() => model.ConfirmPassword)" />
                </div>

                <div class="buttons">
            
                    <button disabled="@(formValid)" class="btn btn-primary button" @onclick="OnValidSubmit">
                        @if (loading) 
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Sign Up
                    </button>
                    <NavLink href="account/login" class="btn btn-link">Already have an account?</NavLink>
                </div>
                    
            </EditForm>
        </div>
    </div>
}
</body>


@code{

    //The model that all user input is bound to
    private Models.Account.AddUser model = new Models.Account.AddUser();

    //types of accounts that can be created
    public bool feeder = false;
    public bool donor = false;
    public string role = "";

    //variables that change the color of the donor/feeder block when it is updated
    public string feederclass = "question-card";
    public string donorclass = "question-card";

    //Tracks whether the form is valid and submit should be clickable
    private bool formValid = false;
    private bool loading;
    
    //Track and display error messages
    public bool error = false;
    private string errorMessage = "";


    // If feeder is selected, the feeder block will be highlighted
    public void newFeeder()
    {
        feeder = true;
        donor = false;
        role = "Feeder";
        feederclass = "question-card-selected";
        donorclass = "question-card";
    }

    // If donor is selected, the donor block will be highlighted
    public void newDonor()
    {
        feeder = false;
        donor = true;
        role = "Donor";
        feederclass = "question-card";
        donorclass = "question-card-selected";
    }

    private async void InvalidSubmit()
    {
        error = true;
        errorMessage = "Please enter all required information";
    }

    //This only looks at password and email fields -> needs to be updated
    private bool IsFormValid()
    {
        return !string.IsNullOrWhiteSpace(model.EmailAddress) ||
           !string.IsNullOrWhiteSpace(model.ConfirmEmail) || // Add other required fields.
           !string.IsNullOrWhiteSpace(model.Password) ||
           !string.IsNullOrWhiteSpace(model.ConfirmPassword);
    }

    
    private async void OnValidSubmit()
    {
        bool isValid = IsFormValid();

        if(!isValid)
        {
            error = true;
            errorMessage = "Please enter all required information";
        }
        else
        {
            loading = true;
            formValid = true;

            Models.Account.NewSBUser NewUser = new  Models.Account.NewSBUser(model.EmailAddress, model.Password);
            try{
                string id = await SBUserService.Register(NewUser);
                //To Debug
                Console.WriteLine(id);
            
                Profile profile = new Profile{
                    Id = id,
                    Role = role,

                    Name = model.Organization,
                    Email = model.EmailAddress,
                    Number = model.Number,

                    StreetAddress = model.StreetAddress,
                    City = model.City,
                    State = model.State,
                    ZipCode = model.ZipCode
                };
                string content = await ProfileService.Register(profile);
                
                NavigationManager.NavigateTo("/account/login");
            } 
            catch(Exception ex)
            {
                loading = false; 
                error = true;
                errorMessage = ex.Message;
                StateHasChanged();
                
            }
        }
        
    }

}