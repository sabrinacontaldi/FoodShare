@page "/"
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@* @inject Blazored.LocalStorage.ILocalStorageService LocalStorage *@

@using System.Security.Claims

<link rel="stylesheet" 
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css" 
    integrity="sha512-xh6O/CkQoPOWDdYTDqeRdPCVd1SpvCA9XXcUnZS2FmJNp1coAFzvtCN9BmamE+4aHK8yyUHUSCcJHgXloTyT2A==" 
    crossorigin="anonymous" 
    referrerpolicy="no-referrer" />

<PageTitle>Home</PageTitle>

<AuthorizeView Roles="Feeder">
    <Authorized>
        <h1>You're logged in as a Feeder, @context.User.Identity.Name</h1>
        @if (isParentInitialized)
        {
            <GroceryList Id = "@id"></GroceryList>
        }
        else
        {
            <p>Loading...</p>
        }
        
    </Authorized>
</AuthorizeView>
<AuthorizeView Roles ="Donor">
    <Authorized>
        <h1>You're logged in as a Donor, @context.User.Identity.Name</h1>
        @if (isParentInitialized)
        {
            <FoodShare.Pages.Donor.DonorHome Id = "@id" Zip="@zipCode"></FoodShare.Pages.Donor.DonorHome>
        }
        else
        {
            <p>Loading...</p>
        }
    </Authorized>
</AuthorizeView>

<AuthorizeView>
    <NotAuthorized>
   <body class="main-page">
        <div class="box">
            <div class="card">
                <h5>What do we do?</h5>
                <div class="pra">
                    <p>We connect those who have excess food with those who don't have enough food, opening a channel of communication between
                    the two parties.</p>
                </div>
            </div>

            <div class= "card" >
                <h5>Why do we do it?</h5>
                <div class="pra">
                    <p>The goal is to reduce food waste and help make the food dontaion process more efficient and effective.</p>	
                </div>
            </div>

            <div class= "card" >
                <h5>How can you help?</h5>
                <div class="pra">
                    <p>Sign up and join our team! At this current moment we are focusing on Grocery stores as donors and food banks and 
                    shelters as distributors.</p>
                </div>
            </div>
        </div>    
        @* I'm pretty sure there's a better way to navigate between the pages *@
        <div class="buttons button-center button-horizontal">
            <a href="/account/create-account" asp-page="/account/create-account" class="button" type="button">Create an Account</a>
            <a href="/account/login" asp-page="/account/login" class="button" type="button">Login</a>
        </div> 
     </body>
    </NotAuthorized>
</AuthorizeView>

@code{
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    
    protected string? id {get; set;} = null;
    protected string? zipCode { get; set; } = null;

    private bool isParentInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            try
            {
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var user = authState?.User;
            
                if (user?.Identity is not null && user.Identity.IsAuthenticated)
                {
                var nameIdentifierClaim = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier);
                if (nameIdentifierClaim != null)
                    {
                        id = nameIdentifierClaim.Value;
                        Console.WriteLine(id);
                    }
                    var zip = user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.PostalCode);
                    if (zip != null)
                    {
                        zipCode = zip.Value;
                        Console.WriteLine(zip);
                    }
                }

                if(id != null)
                {
                    isParentInitialized = true;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }
    }
}
